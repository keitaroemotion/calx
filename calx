#!/usr/bin/env ruby

require 'colorize'
require 'date'
require '/usr/local/lib/calx/controller.rb'

option = ARGV[0]

$d = DateTime.now
$haec_annus = $d.year
$haec_mensis = $d.month
#haec_uno_dies = DateTime.new($haec_annus,$haec_mensis,1).wday

def complement_year(year)
  if year.to_s == 2
    return "20#{year}"
  end
end

def insert(isholiday=false,ext="")
 # month day {comment} year
  month = ARGV[1]
  day = ARGV[2]

  comment = ARGV[3]
  year = $d.year.to_s
  if ARGV.size == 5
    year = complement_year ARGV[4]
  end

  if ARGV.size == 2
    month = $d.month
    day = $d.day
    comment = ARGV[1]
  end

  if (year == nil) || (month == nil) || (day == nil)
    year = $d.year
    month = $d.month
    day = $d.day
  end

  if ext == ""
    Controller.insert(year, month, day, comment, isholiday)
    abort "registration completed | #{year}/#{month}/#{day} #{comment}"
  else
    Controller.insert_custom ARGV[1], ARGV[2]
    abort "custom registration completed | #{ARGV[1]} :  '#{ARGV[2]}'"
  end

end

def delete()
  if ARGV.size < 3
    abort "Error : calx rm [month] [day] [year]".red
  end
  # month day year
  month = ARGV[1]
  day = ARGV[2]

  year = $d.year.to_s
  if ARGV.size == 4
    year = complement_year ARGV[3]
  end
  Controller.delete year, month, day
  abort "deletion completed : #{year}/#{month}/#{day}"
end

case option

when "taskdel", "deltask", "deltas"
  month = ARGV[1]
  day = ARGV[2]
  year = $d.year.to_s
  index = ARGV[3]

  if ARGV.size == 5
    year = complement_year ARGV[4]
  end

  if ARGV.size == 2
    month = $d.month
    day = $d.day
    index = ARGV[1]
  end
  Controller.delete_todo year, month, day, index.to_i
  abort
when "add"
  insert
when "addcustom", "addcust"
  insert false, "custom"
  abort
when "hol"
  insert true
when "rm", "del"
  delete
when "-h", "help"
  puts
  puts "calx ... show calendar "
  puts "calx add [month] [day] [comment] [optional:year] ... add todo "
  puts "calx hol [month] [day] [comment] [optional:year] ... add holiday"
  puts "calx rm [month] [day] [optional:year] ... rm todo|holiday"
  puts "calx cert [year] [month]  ... show the calendar of certain month of certain year"
  puts "calx addcust [dayofweek...su/mo/tu/we/th/fr/sa] [comment] ... add custom schedule"
  puts "calx deltask [index] ... delete the task of today by index[1..]"
  puts
  abort
when "cert"
  if ARGV.size < 3
    abort "argument is too short"
  end
  $haec_annus = ARGV[1]
  $haec_mensis = ARGV[2]
else

end

COMMON_YEAR_DAYS_IN_MONTH = [nil, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

def days_in_month(month, year = Time.now.year)
   return 29 if month == 2 && Date.gregorian_leap?(year)
   COMMON_YEAR_DAYS_IN_MONTH[month]
end

def nanciscorRatio(hour, minute)
  maximus_consummatio = 9.0*60.0
  haec_consummatio =  ((hour-9.0)*60.0)+minute.to_f
  (haec_consummatio/maximus_consummatio*100.0).to_i
end

haec_uno_dies = DateTime.new($haec_annus.to_i,$haec_mensis.to_i,1).wday

def showTempus(d)
  minute = d.minute.to_s
  if minute.size == 1
   minute = "0"+minute
  end

  time = "%s:%s " % [d.hour, minute]
  printf time.green
  printf "["
  percentage =  "%i" % [nanciscorRatio(d.hour, d.minute)]
  allelem = 12.0
  ratioA = (allelem * percentage.to_f/100.0).to_i
  ratioB = allelem - ratioA
  (1..ratioA).each { |x|
   printf "|".red
  }

  (1..ratioB).each { |x|
   printf "|"
  }
  printf "]"

  if percentage == "100"
    percentage = "FIN"
  end
  printf percentage.green
  if percentage != "FIN"
    printf "%"
  end


  puts
end

showTempus $d


$timesepatationkey = "time="

def convertIntIntoString(int)
  case int
  when 0
    return "su"
  when 1
    return "mo"
  when 2
    return "tu"
  when 3
    return "we"
  when 4
    return "th"
  when 5
    return "fr"
  when 6
    return "sa"
  end
end

def add_right_pane(arr, int)
  arr += Controller.getCustoms(convertIntIntoString($d.wday))
  extra = ""
  if arr.size > int
    extra = "- "+arr[int].chomp
  end
  remnant = -1
  if extra.include? $timesepatationkey
    time = extra.strip.split($timesepatationkey)[1].split(':')
    hour = time[0].to_i
    min = time[1].to_i
    remnant =  (hour*60+min) - ($d.hour*60+$d.minute)
    extra = extra.gsub! $timesepatationkey , ""
  end
  printf "| #{extra} ".white
  if remnant > 0
    hour = ""
    remnant_devided = remnant/60
    if remnant_devided > 0
      hour = "%s hrs " % [remnant_devided]
    end
    minutes = "%s minutes" % [remnant%60]

    printf "#{hour}#{minutes} left ".green
  end
  puts
end


["Su","Mo","Tu","We","Th","Fr","Sa"].each { |dow|
  printf dow+" "
}

todos =  Controller.get_text($haec_annus.to_i, $haec_mensis.to_i, $d.day)


puts "| todos today"

(1.. haec_uno_dies).each {
  printf "   "
}

count = 0
striplen = 0
maxlen = 21

def entail(striplen, maxlen)
  if (striplen < maxlen)
    (1..maxlen-striplen).each { |s|
      printf " "
    }
  end
end

(1..days_in_month($haec_mensis.to_i, $haec_annus.to_i)).each { |dies|
  diesprop = DateTime.new($haec_annus.to_i,$haec_mensis.to_i,dies)
  if diesprop.wday == 0
    add_right_pane todos, count
    count += 1
    striplen = 0
  end
  vdies = dies.to_s
  if (dies < 10)
    vdies = " "+vdies
  end
  if diesprop.day == $d.day
    printf (vdies+" ").green
    striplen += 3
  elsif Controller.hasSchedule $haec_annus, $haec_mensis, dies
    printf (vdies+" ").blue
    striplen += 3
  elsif Controller.hasSchedule $haec_annus, $haec_mensis, dies, true
    printf (vdies+" ").red
    striplen += 3
  elsif (diesprop.wday == 0) || (diesprop.wday == 6)
    printf (vdies+" ").red
    striplen += 3
  else
    printf vdies+" "
    striplen += 3
  end
}

entail striplen, maxlen
add_right_pane todos, count


