#!/usr/bin/env ruby

require 'colorize'
require 'date'
require '/usr/local/lib/calx/controller.rb'

option = ARGV[0]

$d = DateTime.now
$haec_annus = $d.year
$haec_mensis = $d.month
#haec_uno_dies = DateTime.new($haec_annus,$haec_mensis,1).wday

def complement_year(year)
  if year.to_s == 2
    return "20#{year}"
  end
end

def insert(isholiday=false)
  if !isholiday && ARGV.size < 4
    abort "Error : [month] [day] [comment] [year]".red
  end

  if isholiday && ARGV.size < 3
    abort "Error : [month] [day] [year]".red
  end

  # month day {comment} year
  month = ARGV[1]
  day = ARGV[2]

  comment = ARGV[3]
  year = $d.year.to_s
  if ARGV.size == 5
    year = complement_year ARGV[4]
  end
  Controller.insert(year, month, day, comment, isholiday)
  abort "registration completed : #{year}/#{month}/#{day} #{comment}"
end

def delete()
  if ARGV.size < 3
    abort "Error : calx rm [month] [day] [year]".red
  end
  # month day year
  month = ARGV[1]
  day = ARGV[2]

  year = $d.year.to_s
  if ARGV.size == 4
    year = complement_year ARGV[3]
  end
  Controller.delete year, month, day
  abort "deletion completed : #{year}/#{month}/#{day}"
end

case option

when "add"
  insert
when "hol"
  insert true
when "rm"
  delete
when "-h"
  puts
  puts "calx ... show calendar "
  puts "calx add [month] [day] [comment] [optional:year] ... add todo "
  puts "calx hol [month] [day] [comment] [optional:year] ... add holiday"
  puts "calx rm [month] [day] [optional:year] ... rm todo|holiday"
  puts
  abort
when "cert"
  if ARGV.size < 3
    abort "argument is too short"
  end
  $haec_annus = ARGV[1]
  $haec_mensis = ARGV[2]
else

end

COMMON_YEAR_DAYS_IN_MONTH = [nil, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

def days_in_month(month, year = Time.now.year)
   return 29 if month == 2 && Date.gregorian_leap?(year)
   COMMON_YEAR_DAYS_IN_MONTH[month]
end

def nanciscorRatio(hour, minute)
  maximus_consummatio = 9.0*60.0
  haec_consummatio =  ((hour-9.0)*60.0)+minute.to_f
  (haec_consummatio/maximus_consummatio*100.0).to_i
end

haec_uno_dies = DateTime.new($haec_annus.to_i,$haec_mensis.to_i,1).wday

def showTempus(d)
  line = "------"
  printf line
  minute = d.minute.to_s
  if minute.size == 1
   minute = "0"+minute
  end
  time = " %s:%s " % [d.hour, minute]
  printf time.green
  printf "---|"
  percentage =  "%i" % [nanciscorRatio(d.hour, d.minute)]
  if percentage == "100"
    percentage = "FIN"
  end
  printf percentage.green
  if percentage != "FIN"
    printf "%"
  end
  puts
end

showTempus $d

def add_right_pane(arr, int)
  extra = ""
  if arr.size > int
    extra = "- "+arr[int].chomp
  end
  puts "| #{extra}       "
end


["Su","Mo","Tu","We","Th","Fr","Sa"].each { |dow|
  printf dow+" "
}

todos =  Controller.get_text($haec_annus.to_i, $haec_mensis.to_i, $d.day)


puts "| todos today"

(1.. haec_uno_dies).each {
  printf "   "
}

count = 0

(1..days_in_month($haec_mensis.to_i, $haec_annus.to_i)).each { |dies|
  diesprop = DateTime.new($haec_annus.to_i,$haec_mensis.to_i,dies)
  if diesprop.wday == 0
    add_right_pane todos, count
    count += 1
  end
  vdies = dies.to_s
  if (dies < 10)
    vdies = " "+vdies
  end
  if diesprop.day == $d.day
    printf (vdies+" ").yellow
  elsif Controller.hasSchedule $haec_annus, $haec_mensis, dies
    printf (vdies+" ").blue
  elsif Controller.hasSchedule $haec_annus, $haec_mensis, dies, true
    printf (vdies+" ").red
  else
    printf vdies+" "
  end
}

#add_right_pane
puts

